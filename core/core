#!/bin/bash

load inquirer

local_https::command_exists() {
  type "$1" &>/dev/null
}

local_https::generate() {
  set -e
  local domain=$1
  local config_dir=${PLUGIN_DIR}/config
  local ca_self_domain="local-https.zmicro.root_ca.com"
  local ca_data_dir=$PLUGIN_LOCAL_HTTPS_CERTS/ca
  local ca_key=$ca_data_dir/root_ca.key
  local ca_crt=$ca_data_dir/root_ca.crt
  local ca_request_config=$config_dir/conf/ca/certificate-authority-request.conf

  local domain_data_dir=$PLUGIN_LOCAL_HTTPS_CERTS/domain/$domain
  local domain_request_config=$domain_data_dir/domain-request.conf
  local domain_extfile_config=$domain_data_dir/domain-extfile.conf
  local domain_key=$domain_data_dir/server.key
  local domain_csr=$domain_data_dir/server.csr
  local domain_crt=$domain_data_dir/server.crt
  # local data_tmp=$domain_data_dir/tmp

  if [ ! -d "$ca_data_dir" ]; then
    mkdir -p $ca_data_dir
  fi

  if [ ! -d "$domain_data_dir" ]; then
    mkdir -p $domain_data_dir
  fi

  log::info "generate domain request config ..."
  sed "s/local.dev/"$domain"/" $config_dir/conf/domain/domain-request.conf >$domain_request_config
  log::info "generate domain extfile config ..."
  sed "s/local.dev/"$domain"/" $config_dir/conf/domain/domain-extfile.conf >$domain_extfile_config

  # if [ ! -d $data_tmp ]; then
  #   mkdir -p $data_tmp
  # else
  #   rm -rf $data_tmp
  #   mkdir -p $data_tmp
  # fi

  cd $domain_data_dir

  log::info "tips: use the same pass phrase for the following steps ..."

  if [ ! -f "$ca_key" ]; then
    log::info "generate ca private key ..."
    # need password
    # openssl genrsa -des3 -out "$ca_key" 2048 >> /dev/null 2>&1
    # no password
    openssl genrsa -out "$ca_key" 2048 >>/dev/null 2>&1

    rm -rf $ca_crt
  fi

  if [ ! -f "$ca_crt" ]; then
    # 注意：证书颁发机构 CA 有效时间不受苹果系统域名 825 天限制，也就是可以是 3650 天（10年），与下文签发具体域名证书对比
    log::info "generate ca certtificate ..."
    openssl req -x509 \
      -config $ca_request_config \
      -new -nodes \
      -key "$ca_key" \
      -sha256 \
      -days 3650 \
      -out "$ca_crt" >>/dev/null 2>&1
    # -days 825 \
  fi

  # MacOS
  if local_https::command_exists security; then
    log::info "write self signed ca to system ..."

    if [ "$(sudo security find-certificate -c "${ca_self_domain}_force_replace" -a -Z)" = "" ]; then
      # Delete trusted certs by their common name via https://unix.stackexchange.com/a/227014
      sudo security find-certificate -c "${ca_self_domain}" -a -Z | sudo awk '/SHA-1/{system("security delete-certificate -Z "$NF)}'

      # Trust the Root Certificate cert
      sudo security add-trusted-cert \
        -d \
        -r trustRoot \
        -k /Library/Keychains/System.keychain \
        "$ca_crt"
    fi
  elif local_https::command_exists dpkg-reconfigure; then
    local YesNo=(Yes No)
    inquirer::select "Please check $($ca_crt) in next step, are you ready ?" YesNo ok
    if [ "$ok" != "Yes" ]; then
      log::error "You have cancel it"
      exit 1
    fi

    sudo copy $ca_crt /usr/share/ca-certificates/$ca_crt
    sudo dpkg-reconfigure ca-certificates
  fi

  log::info "generate https(ssl) for domain (${domain}) ..."

  if [ ! -f "$domain_key" ]; then
    log::info "generate private key for ${domain} ..."
    # Generate Server Privatekey (服务器私钥)
    openssl genrsa -out "$domain_key" 2048 >>/dev/null 2>&1
  fi

  # Generate Server CA-signed Request (服务器证书签名请求)
  openssl req \
    -new \
    -config $domain_request_config \
    -key "$domain_key" \
    -out "$domain_csr" >>/dev/null 2>&1

  log::info "generate self signed certificate for ${domain} ..."
  # Generate CA-signed SSL Certificate (通过 CSR 向 CA 签发服务端证书)
  #
  # 注意：苹果系统限制，必须使用 SHA256 且域名证书必须小于 825 天，也就是说不能签发 10 年的域名证书，但不影响上面的 CA
  # Certificates last for 2 years and 3 months, which is always less than
  # 825 days, the limit that macOS/iOS apply to all certificates,
  # including custom roots. See https://support.apple.com/en-us/HT210176.
  openssl x509 \
    -req \
    -CA "$ca_crt" \
    -CAkey "$ca_key" \
    -CAcreateserial \
    -days 825 \
    -sha256 \
    -extfile $domain_extfile_config \
    -in "$domain_csr" \
    -out "$domain_crt" >>/dev/null 2>&1

  log::info "clean ..."
  # Cleanup a stray file
  rm -rf $domain_data_dir/*.srl
  rm -rf $domain_csr

  # The username behind sudo, to give ownership back
  # local user=$(os::username)
  # chown -R "$user" .*

  log::success "register local https for $domain done"
  echo ""
  log::success "#####################################"
  log::success "# ssl key: $domain_key"
  log::success "# ssl key: $domain_crt"
  log::success "#####################################"
  echo ""

  set +e
}

export -f local_https::command_exists
export -f local_https::generate
